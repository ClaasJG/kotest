package io.kotest.property.arrow

import arrow.core.None
import arrow.core.Option
import arrow.core.Some
import arrow.core.none
import io.kotest.property.Arb
import io.kotest.property.Exhaustive
import io.kotest.property.RandomSource
import io.kotest.property.Sample
import io.kotest.property.arbitrary.arb
import io.kotest.property.exhaustive.exhaustive

fun <A> Exhaustive.Companion.option(a: A) = exhaustive(listOf(None, Some(a)))

/**
 * Wraps each element generated by the given Arb in a Some.
 */
fun <A> Arb.Companion.some(arb: Arb<A>): Arb<Option<A>> = arb { rs ->
   arb.values(rs).map { Some(it.value) }
}

fun <A> Arb.Companion.option(arb: Arb<A>): Arb<Option<A>> = object : Arb<Option<A>>() {
   override fun edgecases(): List<Option<A>> = arb.edgecases().map { Some(it) }
   override fun values(rs: RandomSource): Sequence<Sample<Option<A>>> {
      return arb.values(rs).map {
         when (rs.random.nextBoolean()) {
            true -> Sample(none<A>())
            false -> Sample(Some(it.value))
         }
      }
   }
}
